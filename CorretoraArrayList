package com.mycompany.corretora;

import java.util.Scanner;
import java.util.ArrayList;

public class Corretora {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int menu=0;
        String endereco="", tipo="";
        float areaTotal=0, valor=0, areaConstruida=0, areaPrivativa=0;
        ArrayList<Imovel> cadastro = new ArrayList(); 
        do {
            System.out.println("1 - Cadastrar Casa");
            System.out.println("2 - Cadastrar Apto");
            System.out.println("3 - Cadastrar Terreno");
            System.out.println("4 - Listar Imóveis");
            System.out.println("0 - Sair");
            menu = scan.nextInt();
            if (menu >= 1 && menu <= 3) {
                System.out.println("Informe o endereço: ");
                scan.nextLine();
                endereco = scan.nextLine();
                System.out.println("Informe a área total: ");
                areaTotal = scan.nextFloat();
                System.out.println("Informe o valor: ");
                valor = scan.nextFloat();
            }
            switch (menu) {
                case 1:
                    System.out.println("Informe a área construida: ");
                    areaConstruida = scan.nextFloat();
                    Imovel c = new Casa(areaConstruida, valor, endereco, areaTotal);
                    cadastro.add(c);
                    break;
                case 2:
                    System.out.println("Informe a área privativa: ");
                    areaPrivativa = scan.nextFloat();
                    Imovel a = new Apto(areaPrivativa, valor, endereco, areaTotal);
                    cadastro.add(a);
                    break;
                case 3:
                    System.out.println("Informe o tipo: U - Urbano, R - Rural: ");
                    scan.nextLine();
                    tipo = scan.nextLine();
                    Imovel t = new Terreno(tipo, valor, endereco, areaTotal);
                    cadastro.add(t);
                    break;
                case 4:
                    if(cadastro.isEmpty()) System.out.println("Nenum imovel cadastrado!");
                    else{
                        for(Imovel i:cadastro){
                            i.exibirDetalhes();
                            
                        }
                    }

                    break;
                case 0:
                    break;
            }

        } while (menu != 0);

    }
}

####################

package com.mycompany.corretora;

public class Imovel {
    private int cod;
    private float valor;
    private String endereco;
    private float areaTotal;
    private static int auxCod = 1;

    public Imovel(float valor, String endereco, float areaTotal) {
        this.cod = auxCod++;
        this.valor = valor;
        this.endereco = endereco;
        this.areaTotal = areaTotal;
        
    }

    public float getAreaTotal() {
        return areaTotal;
    }

    public void setAreaTotal(float areaTotal) {
        this.areaTotal = areaTotal;
    }

    public int getCod() {
        return cod;
    }

    public float getValor() {
        return valor;
    }

    public void setValor(float valor) {
        this.valor = valor;
    }

    public String getEndereco() {
        return endereco;
    }

    public void setEndereco(String endereco) {
        this.endereco = endereco;
    }
    
    public void exibirDetalhes(){
        System.out.println("*********************");
        System.out.println("Código: " + getCod());
        System.out.println("Valor:  " + getValor());
        System.out.println("Endereço: " + getEndereco());
        System.out.println("Área Total: " + getAreaTotal());
        
    }
    
    public float calcularIptu(float areaTotal){
        return (areaTotal*10);
    }
}


####################

package com.mycompany.corretora;

public class Terreno extends Imovel{
    private String tipo;

    public Terreno(float valor, String endereco, float areaTotal) {
        super(valor, endereco, areaTotal);
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    @Override
    public void exibirDetalhes() {
        super.exibirDetalhes(); 
        System.out.println("Tipo: " + getTipo());
        System.out.println("IPTU: " + calcularIptu(getAreaTotal()));
    }
}
####################

package com.mycompany.corretora;

public class Casa extends Imovel {
    private float areaConstruida;

    public Casa(float valor, String endereco, float areaTotal) {
        super(valor, endereco, areaTotal);
        this.areaContruida=areaConstruida;
    }

    public float getAreaConstruida() {
        return areaConstruida;
    }

    public void setAreaConstruida(float areaConstruida) {
        this.areaConstruida = areaConstruida;
    }
     @Override
    public float calcularIptu(float areaConstruida) {
        //(área construída * R$ 12,00) – 35%
        return ((areaConstruida*12) - (areaConstruida*12*0.35f));    
    }

    @Override
    public void exibirDetalhes() {
        super.exibirDetalhes(); 
        System.out.println("Área Construida: " + getAreaConstruida());
        System.out.println("IPTU:  " + calcularIptu(getAreaConstruida()));
    }
   
}
####################

package com.mycompany.corretora;

public class Apartamento extends Imovel {
    private float areaPrivativa;

    public Apartamento(float valor, String endereco, float areaTotal) {
        super(cod, valor, endereco, areaTotal);
        this.areaPrivativa = areaPrivativa;
    }

    public float getAreaPrivativa() {
        return areaPrivativa;
    }

    public void setAreaPrivativa(float areaPrivativa) {
        this.areaPrivativa = areaPrivativa;
    }
    
    public void exibirDetalhes(){
        super.exibirDetalhes();
        System.out.println("Area privativa: " + getAreaPrivativa());
    }

    /*
    @Override :significa que estou sobrescrevendo o método da superclasse.
    Quando eu uso @Override estou indicando que o meu método tem a mesma assinatura 
    (nome, parâmetros e retorno) de um método da superclasse.
    */
    @Override
    public float calcularIptu(float areaPrivativa) {
        //((área privativa * R$ 10,00) + (área total / 24 + área privativa * R$ 5,00)) – 25%
        float resultado_1 =  ((areaPrivativa*10.0f) + (getAreaTotal()/24 + areaPrivativa*5));
        return (resultado_1-(resultado_1*0.25f));
    }
    @Override
    public void exibirDetalhes() {
        super.exibirDetalhes();
        System.out.println("Área Privativa: " + getAreaPrivativa());
        System.out.println("IPTU: " + calcularIptu(getAreaPrivativa()));
    }
}    

