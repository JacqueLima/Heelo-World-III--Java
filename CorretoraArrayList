package com.mycompany.corretora;
import java.util.Scanner;
import java.util.ArrayList;

public class Corretora {

    public static void main(String[] args) {
        ArrayList<Imovel> cadastro = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);
        
            System.out.println("Escolha uma opção:");
            System.out.println("1) Cadastrar casa");
            System.out.println("2) Cadastrar apartamento");
            System.out.println("3) Cadastrar terreno");
            System.out.println("4) Listar imóveis");
            System.out.println("0) Sair");
 }
}
####################

package com.mycompany.corretora;

public class Imovel {
    private int cod;
    private float valor;
    private String endereco;
    private float areaTotal;
    private static int auxCodigo=0;

    public Imovel(int cod, float valor, String endereco, float areaTotal) {
        this.cod = cod;
        this.valor = valor;
        this.endereco = endereco;
        this.areaTotal = areaTotal;
    }

    public int getCod() {
        return cod;
    }

    public void setCod(int cod) {
        this.cod = cod;
    }

    public float getValor() {
        return valor;
    }

    public void setValor(float valor) {
        this.valor = valor;
    }

    public String getEndereco() {
        return endereco;
    }

    public void setEndereco(String endereco) {
        this.endereco = endereco;
    }

    public float getAreaTotal() {
        return areaTotal;
    }

    public void setAreaTotal(float areaTotal) {
        this.areaTotal = areaTotal;
    }

    public static int getAuxCodigo() {
        return auxCodigo;
    }
public static void setAuxCodigo(int auxCodigo) {
        Imovel.auxCodigo = auxCodigo;
    }
    
     public void exibirDetalhes(){
         System.out.println("Codigo: " +getCod());
         System.out.println("Valor: " + getValor());
         System.out.println("Endereco: " + getEndereco());
         System.out.println("Area Total: " + getAreaTotal()); 
    }
    public float calcularIptu(float iptu){
        return iptu;
    }
}
####################

package com.mycompany.corretora;


public class Terreno extends Imovel{
    private String tipo;

    public Terreno(int cod, float valor, String endereco, float areaTotal) {
        super(cod, valor, endereco, areaTotal);
    }

    public String getTipo() {
        return tipo;
    }

    public void setTipo(String tipo) {
        this.tipo = tipo;
    }

    public void exibirDetalhes(){
        super.exibirDetalhes();
        System.out.println("Tipo: " + getTipo()); 
    }
   public float calcularIptu(floar Iptu){
         return areaTotal * 10f;//AQUI TEM ERRO
   }
####################

package com.mycompany.corretora;


public class Casa extends Imovel {
    private float areaConstruida;

    public Casa(int cod, float valor, String endereco, float areaTotal) {
        super(cod, valor, endereco, areaTotal);
    }

    public float getAreaConstruida() {
        return areaConstruida;
    }

    public void setAreaConstruida(float areaConstruida) {
        this.areaConstruida = areaConstruida;
    }
    
    public void exibirDetalhes(){
        super.exibirDetalhes();
        System.out.println("Area Construida" + getAreaConstruida());
    }
    public float calcularIptu(float iptu){
       //EXIBE O CALCULO
        return ((areaConstruida * 12) - 0.35f);
    }
}
####################

package com.mycompany.corretora;

public class Apartamento extends Imovel {
    private float areaPrivativa;

    public Apartamento(int cod, float valor, String endereco, float areaTotal) {
        super(cod, valor, endereco, areaTotal);
    }

    public float getAreaPrivativa() {
        return areaPrivativa;
    }

    public void setAreaPrivativa(float areaPrivativa) {
        this.areaPrivativa = areaPrivativa;
    }
    
    public void exibirDetalhes(){
        super.exibirDetalhes();
        System.out.println("Area privativa: " + getAreaPrivativa());
    }

    @Override
    /*
    @Override :significa que estou sobrescrevendo o método getEndereco() da superclasse.
    Quando eu uso @Override estou indicando que o meu método tem a mesma assinatura 
    (nome, parâmetros e retorno) de um método da superclasse.
    */
    public String getEndereco() {
        return super.getEndereco(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }
      
    public void exibirDetalhes(){
        super.exibirDetalhes();
        System.out.println("Area privativa: " + getAreaPrivativa());
    }
    public float calcularIptu(float iptu){
        return (areaprivativa * 10.f + areatotal / 24 + (areaprivativa * 5f) - 25%;
   }   
}    

